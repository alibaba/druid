CREATE TABLE
  mydataset.newtable (transaction_id INT64, transaction_ts TIMESTAMP)
PARTITION BY
  TIMESTAMP_TRUNC(transaction_ts, DAY)
  OPTIONS (
    partition_expiration_days = 3,
    require_partition_filter = TRUE);
--------------------
CREATE TABLE mydataset.newtable (
	transaction_id INT64,
	transaction_ts TIMESTAMP
)
PARTITION BY TIMESTAMP_TRUNC(transaction_ts, DAY)
OPTIONS (
	'partition_expiration_days' = 3,
	'require_partition_filter' = true
);
------------------------------------------------------------------------------------------------------------------------
SELECT SAFE_CAST("apple" AS INT64) AS not_a_number;
--------------------
SELECT SAFE_CAST("apple" AS INT64) AS not_a_number;
------------------------------------------------------------------------------------------------------------------------
SELECT
ARRAY_AGG(
  table ORDER BY ts DESC LIMIT 1
)[OFFSET(0)] event
FROM cleaned
--------------------
SELECT ARRAY_AGG(table ORDER BY ts DESC LIMIT 1)[OFFSET(0)] AS event
FROM cleaned
------------------------------------------------------------------------------------------------------------------------
SELECT ARRAY_AGG(x LIMIT 5) AS array_agg
FROM UNNEST([2, 1, -2, 3, -2, 1, 2]) AS x;
--------------------
SELECT ARRAY_AGG(x LIMIT 5) AS array_agg
FROM UNNEST([2, 1, -2, 3, -2, 1, 2]) x;
------------------------------------------------------------------------------------------------------------------------
ASSERT (
  (SELECT COUNT(*) > 5 FROM UNNEST([1, 2, 3, 4, 5, 6]))
) AS 'Table must contain more than 5 rows.';
--------------------
ASSERT (
	SELECT COUNT(*) > 5
	FROM UNNEST([1, 2, 3, 4, 5, 6]))
AS '''Table must contain more than 5 rows.''';
------------------------------------------------------------------------------------------------------------------------
SELECT f1
FROM UNNEST(t1)
WHERE f1 IS NOT NULL
ORDER BY event_timestamp DESC
LIMIT 1
--------------------
SELECT f1
FROM UNNEST(t1)
WHERE f1 IS NOT NULL
ORDER BY event_timestamp DESC
LIMIT 1
------------------------------------------------------------------------------------------------------------------------
CREATE TEMP TABLE xxx
PARTITION BY date(partitiontime)
CLUSTER BY latest_status_name
AS
  select 1;
--------------------
CREATE TEMPORARY TABLE xxx
PARTITION BY date(partitiontime)
CLUSTER BY latest_status_name
AS
SELECT 1;
------------------------------------------------------------------------------------------------------------------------
select *
from t
where TIMESTAMP.abc.created_timestamp) >= area.effective_timestamp
--------------------
SELECT *
FROM t
WHERE TIMESTAMP(abc.created_timestamp) >= area.effective_timestamp
------------------------------------------------------------------------------------------------------------------------
WITH
  Items AS (
    SELECT STRUCT('blue' AS color, 'round' AS shape) AS info UNION ALL
    SELECT STRUCT('blue', 'square') UNION ALL
    SELECT STRUCT('red', 'round')
  )
SELECT * FROM Items;
--------------------
WITH Items AS (
		SELECT STRUCT('blue' AS color, 'round' AS shape) AS info
		UNION ALL
		SELECT STRUCT('blue', 'square')
		UNION ALL
		SELECT STRUCT('red', 'round')
	)
SELECT *
FROM Items;
------------------------------------------------------------------------------------------------------------------------
SELECT DATE_ADD(DATE '2008-12-25', INTERVAL 5 DAY) AS five_days_later;
--------------------
SELECT DATE_ADD(DATE '2008-12-25', INTERVAL 5 DAY) AS five_days_later;
------------------------------------------------------------------------------------------------------------------------
CREATE TABLE mydataset.myclusteredtable
(
  customer_id STRING,
  transaction_amount NUMERIC
)
PARTITION BY DATE(_PARTITIONTIME)
CLUSTER BY
  customer_id
OPTIONS (
  partition_expiration_days=3,
  description="a table clustered by customer_id"
)
--------------------
CREATE TABLE mydataset.myclusteredtable (
	customer_id STRING,
	transaction_amount NUMERIC
)
PARTITION BY DATE(_PARTITIONTIME)
CLUSTER BY customer_id
OPTIONS (
	'partition_expiration_days' = 3,
	'description' = "a table clustered by customer_id"
)
------------------------------------------------------------------------------------------------------------------------
CREATE TABLE `myproject.mydataset.mytable`
CLONE `myproject.mydataset.mytablesnapshot`
OPTIONS(
  expiration_timestamp=TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 365 DAY),
  friendly_name="my_table",
  description="A table that expires in 1 year",
  labels=[("org_unit", "development")]
)
--------------------
CREATE TABLE `myproject.mydataset.mytable`
CLONE `myproject.mydataset.mytablesnapshot`
OPTIONS (
	'expiration_timestamp' = TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 365 DAY),
	'friendly_name' = "my_table",
	'description' = "A table that expires in 1 year",
	'labels' = [("org_unit", "development")]
)
------------------------------------------------------------------------------------------------------------------------
SELECT
  WITH DIFFERENTIAL_PRIVACY
    OPTIONS(epsilon=10, delta=.01, max_groups_contributed=2, privacy_unit_column=id)
    item,
    AVG(quantity, contribution_bounds_per_group => (0,100)) AS average_quantity
FROM professors
GROUP BY item;
--------------------
SELECT
	WITH DIFFERENTIAL_PRIVACY
	OPTIONS (epsilon = 10,delta = .01,max_groups_contributed = 2,privacy_unit_column = id)
	item, AVG(quantity, contribution_bounds_per_group => (0, 100)) AS average_quantity
FROM professors
GROUP BY item;