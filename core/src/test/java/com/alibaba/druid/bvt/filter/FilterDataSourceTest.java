package com.alibaba.druid.bvt.filter;

import com.alibaba.druid.filter.FilterAdapter;
import com.alibaba.druid.filter.FilterChain;
import com.alibaba.druid.filter.FilterDataSource;
import com.alibaba.druid.proxy.jdbc.*;
import com.mchange.v2.c3p0.ComboPooledDataSource;
import junit.framework.TestCase;
import org.junit.Assert;

import java.sql.*;
import java.util.Arrays;

/**
 * @author addenda
 * @since 2023/5/4 20:31
 */
public class FilterDataSourceTest extends TestCase {

    FilterDataSource filterDataSource = null;

    protected void setUp() throws Exception {
        ComboPooledDataSource dataSource = new ComboPooledDataSource();
        dataSource.setJdbcUrl("jdbc:h2:file:~/.h2/FilterDataSourceTest;AUTO_SERVER=TRUE");
        dataSource.setUser("sa");
        dataSource.setPassword("");

        filterDataSource = new FilterDataSource(dataSource, Arrays.asList(new ConnectionPrepareStatementFilter()));
    }

    protected void tearDown() throws Exception {
    }

    public void test_filter_data_source() throws Exception {
        Connection connection = filterDataSource.getConnection();
        PreparedStatement selectAColumnFromDual = connection.prepareStatement("select 'a_result' as result from dual");
        ResultSet resultSet = selectAColumnFromDual.executeQuery();
        while(resultSet.next()) {
            String result = resultSet.getString("result");
            Assert.assertEquals("c_result", result);
        }
    }

    private static class ConnectionPrepareStatementFilter extends FilterAdapter {

        @Override
        public PreparedStatementProxy connection_prepareStatement(
                FilterChain chain, ConnectionProxy connection, String sql) throws SQLException {
            sql = process(sql);
            return super.connection_prepareStatement(chain, connection, sql);
        }

        @Override
        public PreparedStatementProxy connection_prepareStatement(
                FilterChain chain, ConnectionProxy connection, String sql, int autoGeneratedKeys) throws SQLException {
            sql = process(sql);
            return super.connection_prepareStatement(chain, connection, sql, autoGeneratedKeys);
        }

        @Override
        public PreparedStatementProxy connection_prepareStatement(
                FilterChain chain, ConnectionProxy connection, String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
            sql = process(sql);
            return super.connection_prepareStatement(chain, connection, sql, resultSetType, resultSetConcurrency);
        }

        @Override
        public PreparedStatementProxy connection_prepareStatement(
                FilterChain chain, ConnectionProxy connection, String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
            sql = process(sql);
            return super.connection_prepareStatement(chain, connection, sql, resultSetType, resultSetConcurrency, resultSetHoldability);
        }

        @Override
        public PreparedStatementProxy connection_prepareStatement(
                FilterChain chain, ConnectionProxy connection, String sql, int[] columnIndexes) throws SQLException {
            sql = process(sql);
            return super.connection_prepareStatement(chain, connection, sql, columnIndexes);
        }

        @Override
        public PreparedStatementProxy connection_prepareStatement(
                FilterChain chain, ConnectionProxy connection, String sql, String[] columnNames) throws SQLException {
            sql = process(sql);
            return super.connection_prepareStatement(chain, connection, sql, columnNames);
        }

        protected String process(String sql) {
            return sql.replaceFirst("a_result", "c_result");
        }

    }

}
